How to run a tracking simulation...
Last updated: 2012-10-04 (v2.6.0)

If you are reading this file, then hopefully you have already checked out a
version of the ultratrack svn repository into one of your user directories.
You might also be accessing this from one of my (Mark's) directories on the
file servers, which is also fine, assuming you don't need to modify any of the
core Matlab functions.

Before you get started...
* These simulations assume that you have a disp.dat file already generated from
  the FEM simulation code.  That is under a separated svn repository.

* You will need to have Field II installed and running on your machine.

Starting...
arfi_scans_template.m is where you should all of your simulation setup.  This
driver function is pretty well commented, and it sets up the simulation code
paths, allows you to define the simulation phantom and the scanning parameters,
setup a tracking algorithm to use for displacement estimation, and finally,
goes through and actually executes everything for you.

I would recommend copying arfi_scans_template into a working directory for your
simulations, and rename it to something unique for those jobs.  

Some notes:

* The directories generated by ultratrack can have extremely long names, and
  there are subdirectories that are generated with even longer names.  This is
  done so that different parameteric analyses can be run in a single root
  simulation directory without clobbering previous runs, but you will want to
  use tab-completions to navigate around!

* The displacement files that are generated (res_simtrack.mat) can be very
  large depending on the sampling frequency being used in the sims and the
  number of scan lines and time steps that you are simulating).  Be aware of
  this since this final memory surge won't occur until the very last stage of
  the simulation!!

* These simulations have some computation efficiency improvements built in, but
  they can take days to run, even on very fast machines.  There are data files
  written at more reasonable checkpoints, *but* restarting a sim that gets
  prematurely terminated is not a graceful endeavor (hopefully it will be in
  future version of this code).  You can restart jobs, but you need to do that
  with a lot of parameter tweaking in your driver function based on what has 
  been already written to disk.
