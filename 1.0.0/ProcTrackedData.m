function [ProcVars]=ProcTrackedData(Time,Freq,FileName,LatPosition,GenFigs,SaveData);
% function [ProcVars]=ProcTrackedData(Time,Freq,FileName,LatPosition,GenFigs,SaveData);
%
% process the track.mat files generated by the ultrasonic
% tracking code for the FEM displacement data; it assumes that
% you are in the directory that contains track.mat
%
% INPUTS:
% Time - time step to look at
% Freq - float (if ~= 7, then a truncated RMSjitter window is
% used)
% [This flag changes the kernel over which the RMS jitter is
% calculated.]
% FileName - string - name of file to open ('track.mat')
% LatPosition - float - lateral position to process, where 0 is
% the center (m)
% GenFigs - Boolean (1 - yes, 0 - no)
% SaveData - Boolean (1 - yes, 0 - no)
%
% OUTPUTS:
% ProcVars - structure of relevant variables 
% ProcVars is also saved to ProcVars%i.mat in the CWD, where
% %i is the Time (time step) variable being passed to the function
%
% Mark 06/18/05
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% In addition to computing RMS error and max underestimation
% of displacement, I've added a jitter calculation based on
% doing a running average of the tracked data, and then
% subtracting that running average from the actual data
% Mark 12/10/04
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Added output parameter structure (ProcVars); defined at the
% end of the code
% Mark 12/11/04
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% set limits of plots automatically, and make figure generation
% optional 
% Mark 12/15/04
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Integrated the parameters from ProcTrackedDataFreq and
% ProcTrackedDataKS into this single function.  The former code
% added a truncated kernel to the RMSjitter calculation in the
% output structure, while the latter code adds KernelSize as an
% input variable for windows that are not 35 samples.  This
% changes the track*.mat file that is loaded in.
% Mark 06/15/05
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Changed KernelSize from being a numerical input to being a
% file name handle since you can't actually specify the kernel
% size at this stage of the processing (already done).
%
% Also allowed for non-centered lines to be processed to be specified as a
% position, not an index.
% Mark 06/20/05
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% file names will differ from track.mat only when the kernel
% size was different
eval(sprintf('load %s',FileName));

% ASSUMING THE FOLLOWING CONSTANTS
fs = 100e6;	% SAMPLING FREQUENCY OF D & C MATRICES
c = 1540;	% SOUND SPEED (M/S)

% CONVERT THE D MATRIX FROM FIELD SAMPLES TO DISPLACEMENT IN
% MICRONS, AND MAKE TIME THE THIRD DIMENSION
for t = 1:size(D,1),
	TrackedDisp(:,:,t) = -D(t,:,:)*c*1e6/(2*fs);  % microns
end;

% SETUP THE TRACKED AXES
TrackLat = (0:(size(D,3)-1))*PARAMS.XSTEP*1000;
TrackLat = TrackLat  - TrackLat(ceil(size(D,3)/2)); % mm
TrackAx = (PPARAMS.zmax/10:size(D,2))*c/(2*fs)*1000;  % mm
%TrackAx = (1:size(D,2))*c/(2*fs)*1000;  % mm


if (GenFigs == 1),
  figure;
  subplot(1,2,2);
  imagesc(TrackLat,TrackAx,TrackedDisp(:,:,Time));
  title('Tracked FEM Displacement');
  xlabel('Lateral Position (mm)');
  ylabel('Depth (mm)');
  colormap(gray);
  axis([-size(D,3)*PARAMS.XSTEP*1000/2 size(D,3)*PARAMS.XSTEP*1000/2 0 25]);
end;

% LOAD IN THE ZDISP.MAT FILE
load(ZDISPFILE);
FEMdisp = centerplane(zdisp,Time);
% ASSUMED 0.2 mm LATERAL SPACING IN SIMULATIONS
FEMlat = (0:size(FEMdisp,2))*0.2-size(FEMdisp,2)*0.2/2; % mm
FEMax = (0:size(FEMdisp,1))*0.2; % mm
if (GenFigs == 1),
  subplot(1,2,1);
  imagesc(FEMlat,FEMax,FEMdisp);
  title('FEM Displacement');
  xlabel('Lateral Position (mm)')
  ylabel('Depth (mm)');
  colormap(gray);
  axis([-size(FEMdisp,2)*0.2/2 size(FEMdisp,2)*0.2/2 0 25]);
end;
  
% PLOT CENTERLINE PLOTS
% find the centerline of the tracked data
% the lateral extend of the tracked matric should be odd
TrackCenterIndex = (floor(size(TrackedDisp,2)/2)+1);

% accomodate a non-centered line to process
% Mark 06/20/05
LatPosition = LatPosition * 1000;  % convert m -> mm
LatSpacing = abs(TrackLat(2) - TrackLat(1));
LatIndexOffset = floor(LatPosition/LatSpacing);
if((TrackCenterIndex + LatIndexOffset) <= length(TrackLat)),
	TrackCenterIndex = TrackCenterIndex + LatIndexOffset;
else,
	disp('Specified lateral position outside of range of simulated lines.');
	disp('Using the center line by default.');
end;

if (GenFigs == 1),
  figure;
  subplot(2,2,1);
  plot(TrackAx(1:end-1),TrackedDisp(:,TrackCenterIndex,Time));
  hold on;
	% figure out what FEM line to plot based on the LatPosition input
	% Mark 07/08/05
	%plot(FEMax(1:end-1),FEMdisp(:,54));         
	% the FEM spacing is 0.2 mm per line
	FEMLatLine = 54 + round(LatPosition/0.2)
	plot(FEMax(1:end-1),FEMdisp(:,FEMLatLine));         
  title('Center Line Displacements');
  xlabel('Depth (mm)');
  ylabel('Axial Displacement (\mum)');
  %axis([1 25 0 max(FEMdisp(:,54))*1.1]);
  axis([1 25 0 max(FEMdisp(:,FEMLatLine))*1.1]);
  
  orient landscape;
end;
%print -dps compare.ps;

% COMPUTER RMS ERROR B/W FEM AND TRACKED DISPLACEMENTS
% first, find tracked axial indices that line up with the FEM
% indices (which are relatively undersampled)
for b=1:length(FEMax),
	index = find(TrackAx>(FEMax(b)-0.01) & TrackAx<(FEMax(b)+0.01));
	if(length(index)>1)
		index = index(1);
	end;
	TrackFEMax(b) = index;
end;

TRACKED = TrackedDisp(TrackFEMax,TrackCenterIndex,Time);
% get rid of NaN values - they should be 0
badvalues = isnan(TRACKED);
for test = 1:length(TRACKED),
	if (badvalues(test) == 1),
		TRACKED(test) = 0;
	end;
end;
	
MODEL = FEMdisp(:,54);
for a = 1:length(MODEL),
	DiffModTrack(a) = MODEL(a) - TRACKED(a);
end;

if (GenFigs == 1),
  subplot(2,2,2);
  plot(FEMax(10:end-6),-DiffModTrack(10:end-5));
  xlabel('Depth (mm)');
  ylabel('Displacement Error (\mum)');
  title('Tracked Displacement Error');
end;

% calculate RMS error over a slightly restricted length to
% throw out the edges
RMSerror = abs(mean(DiffModTrack(10:end-5)));

% calculate min/max error
MaxDispError = max(DiffModTrack(10:end-5));
MinDispError = min(DiffModTrack(10:end-5));
%disp('Maximum Displacement Error');
%if(abs(MinDispError) > abs(MaxDispError)),
%	disp(-MinDispError);
%else,
%	disp(-MaxDispError);
%end;

% COMPUTE RUNNING AVERAGE OF THE TRACKED DATA
% using the non-aligned tracked displacement data since it has
% greater spatial sampling
%
% SET THE NUMBER OF SAMPLES OVER WHICH TO PERFORM THE
% CONVOLUTION
Nconv = 500;  % 0.385 mm length @ 100 MHz sampling rate
%Nconv = 325;

JitterLine = TrackedDisp(:,TrackCenterIndex,Time);
% get rid of NaN values - they should be 0
badvalues = isnan(JitterLine);
for test = 1:length(JitterLine),
        if (badvalues(test) == 1),
                JitterLine(test) = 0;
        end;
end;

ConvTrackedDisp = conv(JitterLine,ones(1,Nconv)/Nconv);
ConvTrackedDisp = ConvTrackedDisp(Nconv:(end-Nconv));

% now setup the new axes
ConvTrackAx = TrackAx(Nconv/2+1:(end-Nconv/2-1));  % mm

% COMPUTER RMS ERROR B/W FEM AND RUNNING-AVE TRACKED DISPLACEMENTS
% first, find conv tracked axial indices that line up with the FEM
% indices (which are relatively undersampled)
for b=1:length(FEMax),
	if(FEMax(b) < min(ConvTrackAx)),
		CONV_TRACKED(b) = 0;	
	elseif(FEMax(b) > max(ConvTrackAx)),
		CONV_TRACKED(b) = 0;
	else,
        	index = find(ConvTrackAx>(FEMax(b)-0.01) & ConvTrackAx<(FEMax(b)+0.01));
        	if(length(index)>1)
               		index = index(1);
        	end;
		CONV_TRACKED(b) = ConvTrackedDisp(index);
	end;
end;
CONV_TRACKED = reshape(CONV_TRACKED,[length(CONV_TRACKED) 1]);

% calculate the RMS error b/w the model and the running average
% tracked data, excluding the boudaries since the running
% average lost them
RMSconvError = mean(abs(MODEL(20:120) - CONV_TRACKED(20:120)));

% make JitterLine the same size as ConvTrackedDisp
JitterLine = JitterLine(Nconv/2:end-Nconv/2-1);

if (GenFigs == 1),
  subplot(2,2,3);
  plot(ConvTrackAx,ConvTrackedDisp);
  hold on;
  plot(ConvTrackAx,JitterLine,'r');
  title('Center Line Jitter Calculation Plot');
  xlabel('Depth (mm)');
  ylabel('Displacement (\mum)');
  axis([2 25 0 max(JitterLine)]);

  subplot(2,2,4);
  plot(ConvTrackAx,JitterLine - ConvTrackedDisp);
  xlabel('Depth (mm)');
  ylabel('Displacement (\mum)');
  axis([2 25 min(JitterLine-ConvTrackedDisp) max(JitterLine-ConvTrackedDisp)]);
end;

% DEFINE THE OUTPUT PARAMETER STRUCTURE
		  						%'DispUnderEst',max(ConvTrackedDisp)/max(MODEL), ...
if(Freq ~= 7),
	ProcVars = struct('fs',fs,'c',c,'TrackedDisp',TrackedDisp, ...
                  'TrackAx',TrackAx,'TrackLat',TrackLat, ...
                  'FEMdisp',FEMdisp,'FEMlat',FEMlat, ...
                  'FEMax',FEMax,'TrackFEMax',TrackFEMax, ...
                  'TRACKED',TRACKED,'MODEL',MODEL, ...
                  'DiffModTrack',DiffModTrack,'RMSerror',RMSerror, ...
                  'MinDispError',-MinDispError, ...
                  'MaxDispError',-MaxDispError, ...
                  'FEMmaxDisp',max(MODEL), ...
                  'Nconv',Nconv,'JitterLine',JitterLine, ...
                  'ConvTrackedDisp',ConvTrackedDisp, ...
                  'ConvTrackAx',ConvTrackAx, ...
                  'TrackCenterIndex',TrackCenterIndex, ...
                  'MeanJitter',std(JitterLine - ConvTrackedDisp), ...
									'RMSjitter',mean(abs(JitterLine(2284:2414,1) - ConvTrackedDisp(2284:2414,1))), ...
		  						'DispUnderEst',ConvTrackedDisp(2349)/MODEL(100), ...
 		  						'CONV_TRACKED',CONV_TRACKED,'RMSconvError', ...
		  						RMSconvError);
else,
	ProcVars = struct('fs',fs,'c',c,'TrackedDisp',TrackedDisp, ...
                  'TrackAx',TrackAx,'TrackLat',TrackLat, ...
                  'FEMdisp',FEMdisp,'FEMlat',FEMlat, ...
                  'FEMax',FEMax,'TrackFEMax',TrackFEMax, ...
                  'TRACKED',TRACKED,'MODEL',MODEL, ...
                  'DiffModTrack',DiffModTrack,'RMSerror',RMSerror, ...
                  'MinDispError',-MinDispError, ...
                  'MaxDispError',-MaxDispError, ...
                  'FEMmaxDisp',max(MODEL), ...
                  'Nconv',Nconv,'JitterLine',JitterLine, ...
                  'ConvTrackedDisp',ConvTrackedDisp, ...
                  'ConvTrackAx',ConvTrackAx, ...
                  'TrackCenterIndex',TrackCenterIndex, ...
                  'MeanJitter',std(JitterLine - ConvTrackedDisp), ...
                  'RMSjitter',mean(abs(JitterLine - ConvTrackedDisp)), ...
								  'DispUnderEst',max(ConvTrackedDisp)/max(MODEL), ...
 		  						'CONV_TRACKED',CONV_TRACKED,'RMSconvError', ...
		  						RMSconvError);
end;

if(SaveData==1),
	eval(sprintf('save ProcVars%i.mat ProcVars',Time));
end;
